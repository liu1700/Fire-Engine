
//////////////////////////////////////////////////////////
//文件名: Bumpmap.ps		日期: 创建于:2014/1/18
//////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture[2];
SamplerState SampleType;

cbuffer LightBuffer
{
    float4 diffuseColor;
    float3 lightDirection;
}

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
};

//////////////////////////////////////
// Pixel Shader
//////////////////////////////////////
float4 BumpMapPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float4 bumpMap;
	float3 bumpNormal;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	
	
	// 获取纹理的采样与插取后所得到的颜色
	textureColor = shaderTexture[0].Sample(SampleType, input.tex);
	bumpMap = shaderTexture[1].Sample(SampleType, input.tex);
	
	// 将法向量的范围增至-1到1
	bumpMap = (bumpMap * 2.0f) - 1.0f;
	
	// 从凹凸贴图中计算法向量
	bumpNormal = input.normal + bumpMap.x * input.tangent + bumpMap.y * input.binormal;
	bumpNormal = normalize(bumpNormal);
	
	// 反转光线方向为计算使用
	lightDir = -lightDirection;
	
	// 计算每个像素上的光强值,饱和处理
	lightIntensity = saturate(dot(bumpNormal, lightDir));
	
	// 计算光照效果
	color = saturate(diffuseColor * lightIntensity);
	
	// 将光强与纹理颜色混合算出最后的颜色
	color = color * textureColor;
	
	return color;
}

