
//////////////////////////////////////////////////////////
//文件名: Light.ps		日期: 创建于:2014/1/11
//////////////////////////////////////////////////////////

////////
// GLOBALS //
////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
	float4 specularColor;
};

////////
// TYPEDEFS //
////////
struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};

//////////////////////////////////////
// Pixel Shader
//////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;
	
	// 获取纹理的采样与插取后所得到的颜色
	textureColor = shaderTexture.Sample(SampleType, input.tex);
	
	// 为像素设置环境光
	color = ambientColor;
	
	// 初始化镜面反光
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);
	
	// 反转光线方向为计算使用
	lightDir = -lightDirection;
	
	// 计算每个像素上的光强值,饱和处理
	lightIntensity = saturate(dot(input.normal, lightDir));
	
	if(lightIntensity > 0.0f)
	{
		color += (diffuseColor * lightIntensity);
		
		// 饱和处理全局与漫反射光
		color = saturate(color);
		
		// 根据光强，法向量与光照方向算出反射向量
		reflection = normalize(2 * lightIntensity * input.normal - lightDir);
		
		// 根据反射向量，观察位置与反射强度算出反射光线数量
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
	}
	
	// 将光强与纹理颜色混合算出最后的颜色
	color = color * textureColor;
	
	// 算出光照强度
	color = saturate(color + specular);
	
	return color;
}